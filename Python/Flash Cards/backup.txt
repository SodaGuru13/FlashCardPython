{
      "Emscripten": [
            "is a complete compiler toolchain to WebAssembly, using Low Level Virtual Machine",
            "(LLVM), with a special focus on speed, size, and the Web platform."
      ],
      "PyScript": [
            "is a framework that allows users to create rich Python applications in the",
            "browser using HTML's interface and the power of Pyodide, WASM, and modern web",
            "technologies."
      ],
      "Pyodide": [
            "is a Python distribution for the browser and Node.js based on WebAssembly."
      ],
      "WASI": [
            "The WebAssembly System Interface is a modular system interface for WebAssembly.",
            "As described in the initial announcement, it's focused on security and",
            "portability."
      ],
      "Wasmtime": [
            "A fast and secure runtime for WebAssembly."
      ],
      "WebAssembly": [
            "(abbreviated Wasm) is a binary instruction format for a stack-based virtual",
            "machine. Wasm is designed as a portable compilation target for programming",
            "languages, enabling deployment on the on the web for client and server",
            "applications."
      ],
      "abs(x)": [
            "Return the absolute value of a number. The argument may be an integer, a",
            "floating point number, or an object implementing __abs__(). If the argument is a",
            "complex number, its magnitude is returned."
      ],
      "aiter(async_iterable)": [
            "Return an asynchronous iterator for an asynchronous iterable. Equivalent to",
            "calling x.__aiter__()."
      ],
      "all(iterable)": [
            "Return True if all elements of the iterable are true (or if the iterable is",
            "empty)."
      ],
      "any(iterable)": [
            "Return True if any element of the iterable is true. If the iterable is empty,",
            "return False."
      ],
      "ascii(object)": [
            "As repr(), return a string containing a printable representation of an object,",
            "but escape the non-ASCII characters in the string returned by repr() using \\x,",
            "\\u, or \\U escapes."
      ],
      "asynchronous iterable": [
            "An object, that can be used in an async for statement. Must return an",
            "asynchronous iterator from its __aiter__() method."
      ],
      "asynchronous iterator": [
            "An object that implements the __aiter__() and __anext__() methods. __anext__",
            "must return an awaitable object. async for resolves the awaitables returned by",
            "an asynchronous iterator's __anext__() method until it raises a",
            "StopAsyncIteration exception."
      ],
      "awaitable": [
            "An object that can be used in an await expression. Can be a coroutine or an",
            "object with an __await__() method."
      ],
      "awaitable anext(async_iterator), awaitable anext(async_iterator, default)": [
            "When awaited, return the next item from the given asynchronous iterator, or",
            "default if given and the iterator is exhausted."
      ],
      "bin(x)": [
            "Convert an integer number to a binary string prefixed with \"0b\". The result is a",
            "valid Python expression. If x is not a Python int object, it has to define an",
            "__index__() method that returns an integer."
      ],
      "breakpoint(*args, **kws)": [
            "This function drops you into the debugger at the call site. Specifically, it",
            "calls sys.breakpointhook(), passing args and kws straight through. By default,",
            "sys.breakpointhook() calls pdb.set_trace() expecting no arguments. In this case,",
            "it is purely a convenience function so you don't have to explicitly import pdb",
            "or type as much code to enter the debugger. However, sys.breakpointhook() can be",
            "set to some other function and breakpoint() will automatically call that,",
            "allowing you to drop into the debugger of choice. If sys.breakpointhook() is not",
            "accessible, this function will raise RuntimeError. Raises an auditing event",
            "builtins.breakpoint with argument breakpointhook."
      ],
      "class bool(x=False)": [
            "Return a Boolean value, i.e. one of True or False. x is converted using the",
            "standard truth testing procedure. If x is false or omitted, this returns False;",
            "otherwise, it returns True. The bool class is a subclass of int (see Numeric",
            "Types -- int, float, complex). It cannot be subclassed further. Its only",
            "instances are False and True (see Boolean Values)."
      ],
      "class bytearray(source=b''), class bytearray(source, encoding), class bytearray(source, encoding, errors)": [
            "Return a new array of bytes. The bytearray class is a mutable sequence of",
            "integers in the range 0 <= x < 256. It has most of the usual methods of mutable",
            "sequences, described in Mutable Sequence Types, as well as most methods that the",
            "bytes type has, see Bytes and Bytearray Operations. The optional source",
            "parameter can be used to initialize the array in a few different ways: If it is",
            "a string, you must also give the encoding (and optionally, errors) parameters;",
            "bytearray() then converts the string to bytes using str.encode().If it is an",
            "integer, the array will have that size and will be initialized with null bytes.",
            "If it is an object conforming to the buffer interface, a read-only buffer of the",
            "object will be used to initialize the bytes array. If it is an iterable, it must",
            "be an iterable of integers in the range 0 <= x < 256, which are used as the",
            "initial contents of the array. Without an argument, an array of size 0 is",
            "created."
      ],
      "coroutine": [
            "Coroutines are a more generalized form of subroutines. Subroutines are entered",
            "at one point and exited at another point. Coroutines can be entered, exited, and",
            "resumed at many different points. They can be implementedwith the async def",
            "statement."
      ]
}